@page "/apply"
@using System.ComponentModel.DataAnnotations
@using Firebase.Auth
@using Firebase.Database
@using Firebase.Database.Query
@using SBASeatingPlan.Models
@inject IMatDialogService dialogueService
@inject FirebaseClient firebaseClient
@inject FirebaseAuthClient authClient

<EditForm Model="dataModel" OnValidSubmit="Success">
    <DataAnnotationsValidator />
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3-phone">
                <p>
                    <MatTextField Label="Name" @bind-Value="dataModel.Name"/>
                    <ValidationMessage For="@(() => dataModel.Name)"/>
                </p>
                <p>
                    <MatNumericUpDownField Label="Year of Graduation" @bind-Value="dataModel.GradTime" 
                    Step="1" DecimalPlaces="0" Maximum="2024" Minimum="1965"/>
                    <ValidationMessage For="@(() => dataModel.GradTime)" />
                </p>
                <p>
                    <MatSelectItem Items="Sex" Label="Sex" @bind-Value="dataModel.Sex" />
                    <ValidationMessage For="@(() => dataModel.Sex)" />
                </p>
                <p>
                    <MatTextField TValue="int" Label="Age" @bind-Value="dataModel.Age" />
                    <ValidationMessage For="@(() => dataModel.Age)" />
                </p>
                <p>
                    <MatSelectItem Items="Employments" Label="Employment" @bind-Value="dataModel.Employment" />
                    <ValidationMessage For="@(() => dataModel.Employment)" />
                </p>
                <p>
                    <MatTextField Label="Seats" @bind-Value="dataModel.SeatsRequired" Disabled=true/>
                    <MatSlider TValue="int" @bind-Value="dataModel.SeatsRequired" Step="1" EnableStep=true 
                    ValueMin="1" ValueMax="8"/>
                    <ValidationMessage For="@(() => dataModel.SeatsRequired)" />
                </p>
                @if (startLoading)
                {
                    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
                }
                else
                {
                    <MatButton Type="submit" Label="Submit/Edit" Raised=true />
                }
            </div>
        </div>
    </div>
</EditForm>


@code {
    string[] Sex = ["Male", "Female", "Other"];

    string[] Employments = [
        "Unemployed", "Student", "Teacher", "Computer Related", "Other"
    ];

    SubmittionModel dataModel = new()
    {
        Age = 18,
        GradTime = 2019,
        SeatsRequired = 1,
    };

    bool startLoading = false;

    async Task Success()
    {
        startLoading = true;
        var email = authClient.User.Info.Email;

        //fetch database
        var users = await firebaseClient.Child("users").OnceAsync<UserModel>();
        var submittions = await firebaseClient.Child("submittions").OnceAsync<UserModel>();

        //get entry code
        var user = users.First(v => v.Object.Email == email);
        var entryCode = user.Object.EntryCode;
        dataModel.EntryCode = entryCode;

        var submittion = submittions.FirstOrDefault(v => v.Object.EntryCode == entryCode);
        if (submittion != null)
        {
            await firebaseClient.Child("submittions").Child(submittion.Key).PutAsync(dataModel);
            await dialogueService.AlertAsync("Edit Success!");
        }
        else
        {
            await firebaseClient.Child("submittions").PostAsync(dataModel);
            await dialogueService.AlertAsync("Submittion Success!");
        }

        startLoading = false;
    }
}
